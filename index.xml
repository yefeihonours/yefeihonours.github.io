<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HuangYefei&#39;s Blog</title>
    <link>https://yefeihonours.github.io/</link>
    <description>Recent content on HuangYefei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
	<atom:link href="https://yefeihonours.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://yefeihonours.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/about/</guid>
      <description>求知路上攀行者一枚. 学如逆水行舟，不进则退. My: Github https://github.com/yefeihonours Gmail yefeihonours@gmail.com Tags 90后 js Python Linux 服务端开发 前后端都想学星人</description>
    </item>
    
    <item>
      <title>Http Headers各属性的作用</title>
      <link>https://yefeihonours.github.io/post/http/http_headers/</link>
      <pubDate>Sat, 25 Aug 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/http/http_headers/</guid>
      <description>&lt;p&gt;本篇博客将简要介绍 http 请求头， 即 headers 中各参数的含义。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask 启动两次</title>
      <link>https://yefeihonours.github.io/post/python/flask_start_twice/</link>
      <pubDate>Fri, 24 Aug 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/flask_start_twice/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本博客将介绍 flask 项目在 debug 模式下启动两次的原因以及对应解决方案&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在 Linux 启动时自动执行命令或脚本</title>
      <link>https://yefeihonours.github.io/post/linux/auto_start/</link>
      <pubDate>Sun, 01 Jul 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/auto_start/</guid>
      <description>&lt;p&gt;本篇博客将探讨一下在 Linux 操作系统中如何实现在启动时执行命令或脚本。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>压力测试工具 Siege 安装与使用</title>
      <link>https://yefeihonours.github.io/post/linux/siege/</link>
      <pubDate>Sat, 30 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/siege/</guid>
      <description>&lt;p&gt;Siege 是Linux/Unix下的一个WEB系统的压力测试工具。
&lt;br&gt;
&lt;br&gt;
本文记录如何安装 Siege 以及基本使用方法介绍&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask-SQLALchemy 基本方法教程</title>
      <link>https://yefeihonours.github.io/post/python/flask_sqlalchemy/</link>
      <pubDate>Fri, 29 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/flask_sqlalchemy/</guid>
      <description>&lt;h3 id=&#34;flask-sqlalchemy简介&#34;&gt;flask-SQLAlchemy简介&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;flask-SQLAlchemy 是一个为您的flask应用增加SQLAlchemy支持的扩展。
&lt;br&gt;
&lt;br&gt;
在python扩展库中其实包含了SQLAlchemy。在版本的不断叠加后，已经被整合到flask架构中，flask-SQLAlchemy简化在Flask中SQLAlchemy的使用，提供了有用的默认值和额外的助手来更简单地完成常见任务。
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL 中 IN 和 EXISTS 用法的区别</title>
      <link>https://yefeihonours.github.io/post/mysql/in_and_exists/</link>
      <pubDate>Fri, 29 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/mysql/in_and_exists/</guid>
      <description>&lt;p&gt;在sql中，in和exists能实现类似的功能，本文在此将二者作简单对比以及查询效率对比分析。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 常用端口号大全</title>
      <link>https://yefeihonours.github.io/post/linux/common_ports/</link>
      <pubDate>Thu, 28 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/common_ports/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文列举了包括在红帽企业 Linux 中的服务、守护进程、和程序所使用的最常见的通信端口。
&lt;br&gt;&lt;br&gt;
该列表还可以在 /etc/services 文件中找到。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iptables 与 firewalld 防火墙 基本使用教程</title>
      <link>https://yefeihonours.github.io/post/linux/iptablesfirewalld_usage/</link>
      <pubDate>Thu, 28 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/iptablesfirewalld_usage/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;防火墙是整个数据包进入主机前的第一道关卡。防火墙主要通过 Netfilter 与 TCPwrappers 两个机制来管理的。
&lt;br&gt;&lt;br&gt;
1.Netfilter：数据包过滤机制
&lt;br&gt;&lt;br&gt;
2.TCP Wrappers：程序管理机制
&lt;br&gt;&lt;br&gt;
关于数据包过滤机制有两个软件：firewalld 与 iptables
&lt;br&gt;&lt;br&gt;
iptables 通过控制端口来控制服务，而 firewalld 则是通过控制协议来控制端口。
&lt;br&gt;&lt;br&gt;
本文将简要列出 firewalld 防火墙与先前版本中 iptables 防火墙的常用操作命令。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iptables 与 firewalld 防火墙 简介</title>
      <link>https://yefeihonours.github.io/post/linux/iptablesfirewalld_introduction/</link>
      <pubDate>Thu, 28 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/iptablesfirewalld_introduction/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;保障数据的安全性是继保障数据的可用性之后最为重要的一项工作。防火墙作为公网与内网之间的保护屏障，在保障数据的安全性方面起着至关重要的作用。
&lt;br&gt;&lt;br&gt;
本文将着重讨论 RHEL7 中新增 firewalld 防火墙与先前版本中 iptables 防火墙之间的区别做分析。
&lt;br&gt;&lt;br&gt;
以下将分别使用 iptables、firewall-cmd、firewall-config 和T CP Wrappers 等防火墙策略配置服务来完成数十个防火墙策略配置案例。
&lt;br&gt;&lt;br&gt;
通过防火墙不仅可以过滤请求的流量，还可以基于服务程序的名称对流量进行允许和拒绝操作，确保Linux系统的安全性万无一失。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决 Linux 中 cp -f 复制强制覆盖的命令无效的方法</title>
      <link>https://yefeihonours.github.io/post/linux/cp_with_f/</link>
      <pubDate>Thu, 28 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/cp_with_f/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Linux下默认cp命令是有别名的(alias cp=&amp;lsquo;cp -i&amp;rsquo;)，无法在复制时强制覆盖。
&lt;br&gt;&lt;br&gt;
参数说明: -i, &amp;ndash;interactive
prompt before overwrite (overrides a previous -n option)
&lt;br&gt;&lt;br&gt;
即使你用 -f 参数也无法强制覆盖文件，本文将提供几种Linux下cp命令覆盖的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>非交互 SSH 密码验证 sshpass 基本使用教程</title>
      <link>https://yefeihonours.github.io/post/linux/sshpass/</link>
      <pubDate>Thu, 28 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/sshpass/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;ssh登陆不能在命令行中指定密码。sshpass的出现，解决了这一问题。
&lt;br&gt;&lt;br&gt;
sshpass用于非交互SSH的密码验证，一般用在sh脚本中，无须再次输入密码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask &#43; Gunicorn &#43; Nginx 部署</title>
      <link>https://yefeihonours.github.io/post/python/flask_gunicorn_nginx/</link>
      <pubDate>Wed, 27 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/flask_gunicorn_nginx/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Flask，webpy，Django都带着 WSGI server，当然性能都不好，自带的web server 更多的是测试用途。线上发布时，则使用高性能的 wsgi server或者是联合nginx做uwsgi 。
&lt;br&gt;
&lt;br&gt;
greenlet是一个轻量级的协程库。gevent是基于greenlet的网络库。
guincorn是支持wsgi协议的http server，gevent只是它支持的模式之一 ，是为了解决django、flask这些web框架自带wsgi server性能低下的问题。它的特点是与各个web框架结合紧密，部署特别方便。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 下 selenium 常用方法教程</title>
      <link>https://yefeihonours.github.io/post/python/selenium_chromedriver2/</link>
      <pubDate>Mon, 25 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/selenium_chromedriver2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Selenium是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。而对于爬虫来说，使用Selenium操控浏览器来爬取网上的数据那么肯定是爬虫中的杀手武器。
&lt;br&gt;
&lt;br&gt;
这里将介绍 python3 下 selenium + ChromeDriver 常用的方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>selenium &#43; ChromeDriver 配置教程</title>
      <link>https://yefeihonours.github.io/post/python/selenium_chromedriver/</link>
      <pubDate>Mon, 25 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/selenium_chromedriver/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Selenium是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。而对于爬虫来说，使用Selenium操控浏览器来爬取网上的数据那么肯定是爬虫中的杀手武器。
&lt;br&gt;
&lt;br&gt;
这里将介绍selenium + 谷歌浏览器的一般使用。首先会介绍如何安装部署环境，然后贴出一些常用的一些方法介绍。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker 中如何设置 container 的时区</title>
      <link>https://yefeihonours.github.io/post/docker/docker_time/</link>
      <pubDate>Fri, 22 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/docker/docker_time/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Docker Store 上的官方镜像基本上都默认是 UTC 时区，需要我们手动设置一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker 镜像文件导入与导出</title>
      <link>https://yefeihonours.github.io/post/docker/docker_image_export/</link>
      <pubDate>Fri, 22 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/docker/docker_image_export/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Docker 为开发、学习和产品演示提供了很棒的环境，只要获取到对应的 docker 镜像，就可以轻松通过 docker run 命令启动相应的服务，省去了配置环境以及安装等一系列繁琐过程。
&lt;/br&gt;&lt;/br&gt;
但是由于网络原因等一系列不可预测因素，docker镜像制作和下载可能费时较长。
&lt;/br&gt;&lt;/br&gt;
本博客在此提供一种折中解决方案，在网络状态以及配置较高的机器上制作或下载好 docker 镜像，导镜像的压缩包，随后在别的机器上直接导入即可使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 安装 python3.6 教程</title>
      <link>https://yefeihonours.github.io/post/linux/python_setup/</link>
      <pubDate>Fri, 22 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/python_setup/</guid>
      <description>&lt;p&gt;本文记录在 linux 服务器上安装 python3.6 的过程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：通常linux服务器会预装python2，请尽量不要管，使用python3运行python脚本就好，因为可能有程序依赖目前的python2环境，比如yum&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mac 在终端如何进入名称带空格的目录</title>
      <link>https://yefeihonours.github.io/post/mac/space_in_directory/</link>
      <pubDate>Fri, 22 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/mac/space_in_directory/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;当你在终端中cd的时候，如果这个目录名中间带空格，那么你cd就会失败，但是mkdir，mv，cp等都没有影响。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 CentOS 7 上安装 Docker</title>
      <link>https://yefeihonours.github.io/post/linux/docker_setup/</link>
      <pubDate>Fri, 22 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/docker_setup/</guid>
      <description>&lt;p&gt;本文记录在 CentOS 7 服务器上安装 Docker CE 的过程。Docker CE 是社区版，即免费版。Docker EE 是企业版，即收费版。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Docker CE 和 EE 版的安装过程不尽相同，本过程仅适用于 CE 版。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何查看 Docker Container 的 IP 地址</title>
      <link>https://yefeihonours.github.io/post/linux/docker_container_ip/</link>
      <pubDate>Fri, 22 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/docker_container_ip/</guid>
      <description>&lt;p&gt;本文记录如何查看 Docker Container 的 IP 地址的方法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker基本使用教程</title>
      <link>https://yefeihonours.github.io/post/docker/docker_beginner/</link>
      <pubDate>Wed, 13 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/docker/docker_beginner/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文将介绍docker的常用基本命令。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于 docker 打包部署 python web 项目至 linux 服务器</title>
      <link>https://yefeihonours.github.io/post/python/docker_python_web/</link>
      <pubDate>Wed, 13 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/docker_python_web/</guid>
      <description>&lt;h3 id=&#34;将python-web应用容器化&#34;&gt;&lt;strong&gt;将Python Web应用容器化&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;本文将讨论如何让“容器化”的Python Web应用跑在安全的沙箱里，严格的坚守在其各自的环境中（当然，除非你指定它们与其他应用进行“连接”）。
&lt;/br&gt;
&lt;/br&gt;
以下将介绍两站方法如何创建一个Docker容器，如何用这个容器来跑我们的Python Web应用，以及如何用一个Dockerfile来描述整个构建过程以实现完整的自动化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何使Flask-Migrate忽略在Models定义的数据库视图</title>
      <link>https://yefeihonours.github.io/post/python/ignore_sql_views/</link>
      <pubDate>Sun, 03 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/ignore_sql_views/</guid>
      <description>&lt;h4 id=&#34;flask-migrate&#34;&gt;&lt;strong&gt;Flask-Migrate&lt;/strong&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;在使用Flask-SQLAlchemy来定义模型，然后使用Flask-Migrate自动生成迁移脚本以部署到MySQL数据库过程中，我们可能会在应用程序中使用的数据库中定义许多SQL Views辅助查询。
&lt;/br&gt;
&lt;/br&gt;
但是在迁移命令migrate后，Flask-Migrate现在会为该视图生成一个迁移文件，因为它认为它是一个表格。如何在迁移过程中让Flask-Migrate忽略视图？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 __init__.py和__init__函数的作用</title>
      <link>https://yefeihonours.github.io/post/python/init/</link>
      <pubDate>Tue, 22 May 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/init/</guid>
      <description>&lt;h4 id=&#34;一-init-py文件&#34;&gt;一.__&lt;strong&gt;&lt;em&gt;init&lt;/em&gt;&lt;/strong&gt;__.py文件&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;在python模块的每一个包中，都有一个&lt;code&gt;__init__.py&lt;/code&gt;文件（这个文件定义了包的属性和方法）然后是一些模块文件和子目录，假如子目录中也有 &lt;code&gt;__init__.py&lt;/code&gt; 那么它就是这个包的子包了。当你将一个包作为模块导入（比如从 xml 导入 dom ）的时候，实际上导入了它的 &lt;code&gt;__init__.py&lt;/code&gt; 文件。
&lt;/br&gt;
&lt;/br&gt;
一个包是一个带有特殊文件 &lt;code&gt;__init__.py&lt;/code&gt; 的目录。&lt;code&gt;__init__.py&lt;/code&gt; 文件定义了包的属性和方法。其实它可以什么也不定义；可以只是一个空文件，但是必须存在。如果 &lt;code&gt;__init__.py&lt;/code&gt; 不存在，这个目录就仅仅是一个目录，而不是一个包，它就不能被导入或者包含其它的模块和嵌套包。
&lt;/br&gt;
&lt;/br&gt;
在python中， module(也即python的模块)是一个单独的文件来实现的，要把是py文件，或者pyc文件，甚至是C扩展的dll文件。而对于package, Python使用了文件夹来实现它，可以说，一个文件夹就是一个package,里面容纳了一些py、pyc或dll文件，这种方式就是把module聚合成一个package的具体实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 Task and Coroutines</title>
      <link>https://yefeihonours.github.io/post/python/asyncio/</link>
      <pubDate>Fri, 22 Dec 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/asyncio/</guid>
      <description>&lt;h4 id=&#34;1-coroutines-协程&#34;&gt;1. Coroutines 协程&lt;/h4&gt;

&lt;p&gt;Python3 中协程使用标准库中 &lt;code&gt;asyncio&lt;/code&gt; 中的 &lt;code&gt;async def&lt;/code&gt; 方法声明或者使用装饰器 &lt;code&gt;@asyncio.coroutine&lt;/code&gt; . 在Python3.5之后开始使用 &lt;code&gt;async def&lt;/code&gt; 形式的协程, 并且如果不是需要兼容以前版本的话，尽量使用这种形式.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 如何读取 .conf 文件配置信息</title>
      <link>https://yefeihonours.github.io/post/python/conf/</link>
      <pubDate>Thu, 21 Dec 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/conf/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;读取 .conf 文件配置信息&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 如何动态导入模块</title>
      <link>https://yefeihonours.github.io/post/python/import/</link>
      <pubDate>Wed, 20 Dec 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/import/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;使用字符串名称导入模块&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 单例模式的实现</title>
      <link>https://yefeihonours.github.io/post/python/singleton/</link>
      <pubDate>Tue, 19 Dec 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/singleton/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;使用装饰器实现单例模式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MongoDB户权限配置教程</title>
      <link>https://yefeihonours.github.io/post/mongo/auth/</link>
      <pubDate>Thu, 30 Nov 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/mongo/auth/</guid>
      <description>&lt;h3 id=&#34;启动mongodb实例&#34;&gt;启动MongoDb实例&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;本文以&lt;code&gt;Docker&lt;/code&gt;启动&lt;code&gt;MongoDB&lt;/code&gt;为例，省略服务器上MongoDB安装过程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# Docker启动MongoDB实例，使用前确保电脑上已经安装docker

$ docker pull mongo:3.0
...

# --auth 参数表示以权限验证模式启动
$ docker run --name mongo_instance -p 0.0.0.0:27017:27017 -d mongo --auth
d18d1d4fd831...a5bc378178

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 中实用的方法</title>
      <link>https://yefeihonours.github.io/post/python/use/</link>
      <pubDate>Tue, 28 Nov 2017 12:03:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/use/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;让目录或者zip文件成为可运行的脚本&lt;/p&gt;

&lt;p&gt;在书写python脚本的时候，往往会使用不止一个 python 代码文件，而将多个文件放在一个目录下或者zip包中，使目录或者zip包可以直接运行，这样使得多个python简脚本运行变得非常方便&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 中 switch 方法的实现</title>
      <link>https://yefeihonours.github.io/post/python/switch/</link>
      <pubDate>Tue, 28 Nov 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/switch/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在Python开发过程中，很多时候都需要使用到&lt;code&gt;switch&lt;/code&gt;的结构形式，而大多在遇到这种情况的时候，开发人员都是使用&lt;code&gt;if...else...&lt;/code&gt;结构来代替，但是过多的重复判断，会导致程序的可读性变差。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python中不可变常量的实现</title>
      <link>https://yefeihonours.github.io/post/python/const/</link>
      <pubDate>Tue, 28 Nov 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/const/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在Python开发过程中，经常会有用到不可变常量的时候，但一般都是直接定义Python数据类型。但这并不安全，在以后的编码过程中，我们很有可能在自己不知道的情况下修改这个变量的值，但事实上并不希望如此。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Javascript 实用的方法</title>
      <link>https://yefeihonours.github.io/post/javascript/methods/</link>
      <pubDate>Tue, 07 Nov 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/javascript/methods/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;数字金额转化大写&lt;/li&gt;
&lt;li&gt;计算字符串日期对应星期几&lt;/li&gt;
&lt;li&gt;字符串格式化[四舍五入]&lt;/li&gt;
&lt;li&gt;日期格式化&lt;/li&gt;
&lt;li&gt;连字符转驼峰-驼峰转连字符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zookeeper的安装与集群部署</title>
      <link>https://yefeihonours.github.io/post/linux/zookeeper/</link>
      <pubDate>Sun, 05 Nov 2017 13:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/zookeeper/</guid>
      <description>&lt;h2 id=&#34;zookeeper-稳定版下载&#34;&gt;Zookeeper 稳定版下载&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz&#34;&gt;zookeeper-3.4.10.tar.gz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx支持TCP</title>
      <link>https://yefeihonours.github.io/post/linux/nginx_tcp/</link>
      <pubDate>Sun, 05 Nov 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/nginx_tcp/</guid>
      <description>&lt;h1 id=&#34;本文记录如何配置nginx使其支持tcp&#34;&gt;&lt;strong&gt;本文记录如何配置Nginx使其支持TCP&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx配置技巧</title>
      <link>https://yefeihonours.github.io/post/linux/nginx_config/</link>
      <pubDate>Sun, 05 Nov 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/linux/nginx_config/</guid>
      <description>&lt;h1 id=&#34;本文记录nginx的一些常用配置说明&#34;&gt;&lt;strong&gt;本文记录Nginx的一些常用配置说明&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>初探 React</title>
      <link>https://yefeihonours.github.io/post/react/start/</link>
      <pubDate>Fri, 03 Nov 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/react/start/</guid>
      <description>&lt;h2 id=&#34;在线测试&#34;&gt;在线测试&lt;/h2&gt;

&lt;p&gt;在线测试地址:&lt;a href=&#34;https://jsfiddle.net/&#34;&gt;https://jsfiddle.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 基本操作简介</title>
      <link>https://yefeihonours.github.io/post/git/start/</link>
      <pubDate>Wed, 01 Nov 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/git/start/</guid>
      <description>&lt;h2 id=&#34;一-准备环境&#34;&gt;一、准备环境&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;首先，安装好Git。不同的操作系统，安装的方式有所区别&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;$ git --version
git version 2.11.0 (Apple Git-81)

# 配置用户信息
$ git config --global user.name &amp;quot;name&amp;quot;
$ git config --global user.email &amp;quot;name@mail.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yefeihonours.github.io/post/elk/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yefeihonours.github.io/post/elk/start/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>