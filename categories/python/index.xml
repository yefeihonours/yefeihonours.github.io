<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on HuangYefei&#39;s Blog</title>
    <link>https://yefeihonours.github.io/categories/python/</link>
    <description>Recent content in Python on HuangYefei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 29 Jun 2018 12:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://yefeihonours.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flask-SQLALchemy 基本方法教程</title>
      <link>https://yefeihonours.github.io/post/python/flask_sqlalchemy/</link>
      <pubDate>Fri, 29 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/flask_sqlalchemy/</guid>
      <description>&lt;h3 id=&#34;flask-sqlalchemy简介&#34;&gt;&lt;strong&gt;flask-SQLAlchemy简介&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;flask-SQLAlchemy 是一个为您的flask应用增加SQLAlchemy支持的扩展。
&lt;br&gt;
&lt;br&gt;
在python扩展库中其实包含了SQLAlchemy。在版本的不断叠加后，已经被整合到flask架构中，flask-SQLAlchemy简化在Flask中SQLAlchemy的使用，提供了有用的默认值和额外的助手来更简单地完成常见任务。
&lt;br&gt;
&lt;br&gt;

笔者认为SQLAlchemy比较精髓的是使用ORM(对象关系映射)，相对于传统连接数据库使用select，update，insert，delete操作数据表来说具有以下特点：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask &#43; Gunicorn &#43; Nginx 部署</title>
      <link>https://yefeihonours.github.io/post/python/flask_gunicorn_nginx/</link>
      <pubDate>Wed, 27 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/flask_gunicorn_nginx/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Flask，webpy，Django都带着 WSGI server，当然性能都不好，自带的web server 更多的是测试用途。线上发布时，则使用高性能的 wsgi server或者是联合nginx做uwsgi 。
&lt;br&gt;
&lt;br&gt;
greenlet是一个轻量级的协程库。gevent是基于greenlet的网络库。
guincorn是支持wsgi协议的http server，gevent只是它支持的模式之一 ，是为了解决django、flask这些web框架自带wsgi server性能低下的问题。它的特点是与各个web框架结合紧密，部署特别方便。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 下 selenium 常用方法教程</title>
      <link>https://yefeihonours.github.io/post/python/selenium_chromedriver2/</link>
      <pubDate>Mon, 25 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/selenium_chromedriver2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Selenium是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。而对于爬虫来说，使用Selenium操控浏览器来爬取网上的数据那么肯定是爬虫中的杀手武器。
&lt;br&gt;
&lt;br&gt;
这里将介绍selenium + 谷歌浏览器的一般使用。首先会介绍如何安装部署环境，然后贴出一些常用的一些方法介绍。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>selenium &#43; ChromeDriver 配置教程</title>
      <link>https://yefeihonours.github.io/post/python/selenium_chromedriver/</link>
      <pubDate>Mon, 25 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/selenium_chromedriver/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Selenium是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。而对于爬虫来说，使用Selenium操控浏览器来爬取网上的数据那么肯定是爬虫中的杀手武器。
&lt;br&gt;
&lt;br&gt;
这里将介绍selenium + 谷歌浏览器的一般使用。首先会介绍如何安装部署环境，然后贴出一些常用的一些方法介绍。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于 docker 打包部署 python web 项目至 linux 服务器</title>
      <link>https://yefeihonours.github.io/post/python/docker_python_web/</link>
      <pubDate>Wed, 13 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/docker_python_web/</guid>
      <description>&lt;h3 id=&#34;将python-web应用容器化&#34;&gt;&lt;strong&gt;将Python Web应用容器化&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;本文将讨论如何让“容器化”的Python Web应用跑在安全的沙箱里，严格的坚守在其各自的环境中（当然，除非你指定它们与其他应用进行“连接”）。
&lt;/br&gt;
&lt;/br&gt;
以下将介绍两站方法如何创建一个Docker容器，如何用这个容器来跑我们的Python Web应用，以及如何用一个Dockerfile来描述整个构建过程以实现完整的自动化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何使Flask-Migrate忽略在Models定义的数据库视图</title>
      <link>https://yefeihonours.github.io/post/python/ignore_sql_views/</link>
      <pubDate>Sun, 03 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/ignore_sql_views/</guid>
      <description>&lt;h4 id=&#34;flask-migrate&#34;&gt;&lt;strong&gt;Flask-Migrate&lt;/strong&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;在使用Flask-SQLAlchemy来定义模型，然后使用Flask-Migrate自动生成迁移脚本以部署到MySQL数据库过程中，我们可能会在应用程序中使用的数据库中定义许多SQL Views辅助查询。
&lt;/br&gt;
&lt;/br&gt;
但是在迁移命令migrate后，Flask-Migrate现在会为该视图生成一个迁移文件，因为它认为它是一个表格。如何在迁移过程中让Flask-Migrate忽略视图？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 __init__.py和__init__函数的作用</title>
      <link>https://yefeihonours.github.io/post/python/init/</link>
      <pubDate>Tue, 22 May 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/init/</guid>
      <description>&lt;h4 id=&#34;一-init-py文件&#34;&gt;一.__&lt;strong&gt;&lt;em&gt;init&lt;/em&gt;&lt;/strong&gt;__.py文件&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;在python模块的每一个包中，都有一个&lt;code&gt;__init__.py&lt;/code&gt;文件（这个文件定义了包的属性和方法）然后是一些模块文件和子目录，假如子目录中也有 &lt;code&gt;__init__.py&lt;/code&gt; 那么它就是这个包的子包了。当你将一个包作为模块导入（比如从 xml 导入 dom ）的时候，实际上导入了它的 &lt;code&gt;__init__.py&lt;/code&gt; 文件。
&lt;/br&gt;
&lt;/br&gt;
一个包是一个带有特殊文件 &lt;code&gt;__init__.py&lt;/code&gt; 的目录。&lt;code&gt;__init__.py&lt;/code&gt; 文件定义了包的属性和方法。其实它可以什么也不定义；可以只是一个空文件，但是必须存在。如果 &lt;code&gt;__init__.py&lt;/code&gt; 不存在，这个目录就仅仅是一个目录，而不是一个包，它就不能被导入或者包含其它的模块和嵌套包。
&lt;/br&gt;
&lt;/br&gt;
在python中， module(也即python的模块)是一个单独的文件来实现的，要把是py文件，或者pyc文件，甚至是C扩展的dll文件。而对于package, Python使用了文件夹来实现它，可以说，一个文件夹就是一个package,里面容纳了一些py、pyc或dll文件，这种方式就是把module聚合成一个package的具体实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 Task and Coroutines</title>
      <link>https://yefeihonours.github.io/post/python/asyncio/</link>
      <pubDate>Fri, 22 Dec 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/asyncio/</guid>
      <description>&lt;h4 id=&#34;1-coroutines-协程&#34;&gt;1. Coroutines 协程&lt;/h4&gt;

&lt;p&gt;Python3 中协程使用标准库中 &lt;code&gt;asyncio&lt;/code&gt; 中的 &lt;code&gt;async def&lt;/code&gt; 方法声明或者使用装饰器 &lt;code&gt;@asyncio.coroutine&lt;/code&gt; . 在Python3.5之后开始使用 &lt;code&gt;async def&lt;/code&gt; 形式的协程, 并且如果不是需要兼容以前版本的话，尽量使用这种形式.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 如何读取 .conf 文件配置信息</title>
      <link>https://yefeihonours.github.io/post/python/conf/</link>
      <pubDate>Thu, 21 Dec 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/conf/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;读取 .conf 文件配置信息&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 如何动态导入模块</title>
      <link>https://yefeihonours.github.io/post/python/import/</link>
      <pubDate>Wed, 20 Dec 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/import/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;使用字符串名称导入模块&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 单例模式的实现</title>
      <link>https://yefeihonours.github.io/post/python/singleton/</link>
      <pubDate>Tue, 19 Dec 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/singleton/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;使用装饰器实现单例模式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python3 中实用的方法</title>
      <link>https://yefeihonours.github.io/post/python/use/</link>
      <pubDate>Tue, 28 Nov 2017 12:03:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/use/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;让目录或者zip文件成为可运行的脚本&lt;/p&gt;

&lt;p&gt;在书写python脚本的时候，往往会使用不止一个 python 代码文件，而将多个文件放在一个目录下或者zip包中，使目录或者zip包可以直接运行，这样使得多个python简脚本运行变得非常方便&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 中 switch 方法的实现</title>
      <link>https://yefeihonours.github.io/post/python/switch/</link>
      <pubDate>Tue, 28 Nov 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/switch/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在Python开发过程中，很多时候都需要使用到&lt;code&gt;switch&lt;/code&gt;的结构形式，而大多在遇到这种情况的时候，开发人员都是使用&lt;code&gt;if...else...&lt;/code&gt;结构来代替，但是过多的重复判断，会导致程序的可读性变差。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python中不可变常亮的实现</title>
      <link>https://yefeihonours.github.io/post/python/const/</link>
      <pubDate>Tue, 28 Nov 2017 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/const/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在Python开发过程中，经常会有用到不可变常量的时候，但一般都是直接定义Python数据类型。但这并不安全，在以后的编码过程中，我们很有可能在自己不知道的情况下修改这个变量的值，但事实上并不希望如此。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>