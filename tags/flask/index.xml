<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flask on HuangYefei&#39;s Blog</title>
    <link>https://yefeihonours.github.io/tags/flask/</link>
    <description>Recent content in Flask on HuangYefei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 29 Jun 2018 12:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://yefeihonours.github.io/tags/flask/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flask-SQLALchemy 基本方法教程</title>
      <link>https://yefeihonours.github.io/post/python/flask_sqlalchemy/</link>
      <pubDate>Fri, 29 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/flask_sqlalchemy/</guid>
      <description>&lt;h3 id=&#34;flask-sqlalchemy简介&#34;&gt;&lt;strong&gt;flask-SQLAlchemy简介&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;flask-SQLAlchemy 是一个为您的flask应用增加SQLAlchemy支持的扩展。
&lt;br&gt;
&lt;br&gt;
在python扩展库中其实包含了SQLAlchemy。在版本的不断叠加后，已经被整合到flask架构中，flask-SQLAlchemy简化在Flask中SQLAlchemy的使用，提供了有用的默认值和额外的助手来更简单地完成常见任务。
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask &#43; Gunicorn &#43; Nginx 部署</title>
      <link>https://yefeihonours.github.io/post/python/flask_gunicorn_nginx/</link>
      <pubDate>Wed, 27 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/flask_gunicorn_nginx/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Flask，webpy，Django都带着 WSGI server，当然性能都不好，自带的web server 更多的是测试用途。线上发布时，则使用高性能的 wsgi server或者是联合nginx做uwsgi 。
&lt;br&gt;
&lt;br&gt;
greenlet是一个轻量级的协程库。gevent是基于greenlet的网络库。
guincorn是支持wsgi协议的http server，gevent只是它支持的模式之一 ，是为了解决django、flask这些web框架自带wsgi server性能低下的问题。它的特点是与各个web框架结合紧密，部署特别方便。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何使Flask-Migrate忽略在Models定义的数据库视图</title>
      <link>https://yefeihonours.github.io/post/python/ignore_sql_views/</link>
      <pubDate>Sun, 03 Jun 2018 12:00:00 +0800</pubDate>
      
      <guid>https://yefeihonours.github.io/post/python/ignore_sql_views/</guid>
      <description>&lt;h4 id=&#34;flask-migrate&#34;&gt;&lt;strong&gt;Flask-Migrate&lt;/strong&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;在使用Flask-SQLAlchemy来定义模型，然后使用Flask-Migrate自动生成迁移脚本以部署到MySQL数据库过程中，我们可能会在应用程序中使用的数据库中定义许多SQL Views辅助查询。
&lt;/br&gt;
&lt;/br&gt;
但是在迁移命令migrate后，Flask-Migrate现在会为该视图生成一个迁移文件，因为它认为它是一个表格。如何在迁移过程中让Flask-Migrate忽略视图？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>